// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Round entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Round entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Round", id.toString(), this);
  }

  static load(id: string): Round | null {
    return store.get("Round", id) as Round | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get prize(): BigInt {
    let value = this.get("prize");
    return value.toBigInt();
  }

  set prize(value: BigInt) {
    this.set("prize", Value.fromBigInt(value));
  }

  get timestampInit(): BigInt {
    let value = this.get("timestampInit");
    return value.toBigInt();
  }

  set timestampInit(value: BigInt) {
    this.set("timestampInit", Value.fromBigInt(value));
  }

  get timestampEnd(): BigInt | null {
    let value = this.get("timestampEnd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestampEnd(value: BigInt | null) {
    if (value === null) {
      this.unset("timestampEnd");
    } else {
      this.set("timestampEnd", Value.fromBigInt(value as BigInt));
    }
  }

  get tickets(): Array<string> | null {
    let value = this.get("tickets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tickets(value: Array<string> | null) {
    if (value === null) {
      this.unset("tickets");
    } else {
      this.set("tickets", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Player entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Player entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Player", id.toString(), this);
  }

  static load(id: string): Player | null {
    return store.get("Player", id) as Player | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tickets(): Array<string> | null {
    let value = this.get("tickets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tickets(value: Array<string> | null) {
    if (value === null) {
      this.unset("tickets");
    } else {
      this.set("tickets", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Ticket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ticket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ticket entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ticket", id.toString(), this);
  }

  static load(id: string): Ticket | null {
    return store.get("Ticket", id) as Ticket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isGifted(): boolean {
    let value = this.get("isGifted");
    return value.toBoolean();
  }

  set isGifted(value: boolean) {
    this.set("isGifted", Value.fromBoolean(value));
  }

  get player(): string {
    let value = this.get("player");
    return value.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    return value.toString();
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get isWinner(): boolean {
    let value = this.get("isWinner");
    return value.toBoolean();
  }

  set isWinner(value: boolean) {
    this.set("isWinner", Value.fromBoolean(value));
  }
}
