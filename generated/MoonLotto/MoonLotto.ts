// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LotteryResult extends ethereum.Event {
  get params(): LotteryResult__Params {
    return new LotteryResult__Params(this);
  }
}

export class LotteryResult__Params {
  _event: LotteryResult;

  constructor(event: LotteryResult) {
    this._event = event;
  }

  get ticketIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isGifted(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get prizeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PlayerJoined extends ethereum.Event {
  get params(): PlayerJoined__Params {
    return new PlayerJoined__Params(this);
  }
}

export class PlayerJoined__Params {
  _event: PlayerJoined;

  constructor(event: PlayerJoined) {
    this._event = event;
  }

  get ticketIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isGifted(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get prizeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MoonLotto extends ethereum.SmartContract {
  static bind(address: Address): MoonLotto {
    return new MoonLotto("MoonLotto", address);
  }

  currentRound(): BigInt {
    let result = super.call("currentRound", "currentRound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentRound", "currentRound():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLotteryRoundTime(): BigInt {
    let result = super.call(
      "getLotteryRoundTime",
      "getLotteryRoundTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLotteryRoundTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLotteryRoundTime",
      "getLotteryRoundTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinRoundPlayers(): BigInt {
    let result = super.call(
      "getMinRoundPlayers",
      "getMinRoundPlayers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinRoundPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinRoundPlayers",
      "getMinRoundPlayers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isGift(param0: BigInt): boolean {
    let result = super.call("isGift", "isGift(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isGift(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGift", "isGift(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTime(): BigInt {
    let result = super.call("lastTime", "lastTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTime", "lastTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  players(param0: BigInt): Address {
    let result = super.call("players", "players(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_players(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("players", "players(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeAmount(): BigInt {
    let result = super.call("prizeAmount", "prizeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_prizeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("prizeAmount", "prizeAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticketPrice(): BigInt {
    let result = super.call("ticketPrice", "ticketPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ticketPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ticketPrice", "ticketPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winners(param0: BigInt): Address {
    let result = super.call("winners", "winners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_winners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("winners", "winners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ticketPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lotteryRoundTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minRoundPlayers(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GiftTicketCall extends ethereum.Call {
  get inputs(): GiftTicketCall__Inputs {
    return new GiftTicketCall__Inputs(this);
  }

  get outputs(): GiftTicketCall__Outputs {
    return new GiftTicketCall__Outputs(this);
  }
}

export class GiftTicketCall__Inputs {
  _call: GiftTicketCall;

  constructor(call: GiftTicketCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GiftTicketCall__Outputs {
  _call: GiftTicketCall;

  constructor(call: GiftTicketCall) {
    this._call = call;
  }
}

export class JoinLotteryCall extends ethereum.Call {
  get inputs(): JoinLotteryCall__Inputs {
    return new JoinLotteryCall__Inputs(this);
  }

  get outputs(): JoinLotteryCall__Outputs {
    return new JoinLotteryCall__Outputs(this);
  }
}

export class JoinLotteryCall__Inputs {
  _call: JoinLotteryCall;

  constructor(call: JoinLotteryCall) {
    this._call = call;
  }
}

export class JoinLotteryCall__Outputs {
  _call: JoinLotteryCall;

  constructor(call: JoinLotteryCall) {
    this._call = call;
  }
}
